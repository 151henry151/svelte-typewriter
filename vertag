#!/bin/sh

bump() {
    bump_type=$1
    version=$2

    current_major=$(echo "$version" | cut -d . -f 1)

    case "$bump_type" in
        major)
            new_major=$(( current_major + 1 ))
            new_version="$new_major.0.0"
            echo "$new_version"
            ;;
        minor)
            current_minor=$(echo "$version" | cut -d . -f 2)
            new_minor=$(( new_minor + 1 ))
            new_version="$current_major.$new_minor.0"
            echo "$new_version"
            ;;
        patch)
            current_minor=$(echo "$version" | cut -d . -f 2)
            current_patch=$(echo "$version" | cut -d . -f 3)
            new_patch=$(( current_patch + 1 ))
            new_version="$current_major.$current_minor.$new_patch"
            echo "$new_version"
            ;;
        *)
            echo "Error: Unrecognized bump type!"
            exit 1
            ;;
    esac
}

# runs git-cliff
# generates new changelog
# add files and commit
# tag commit
release() {
    new_version=$1

    [ -z "$new_version" ] && echo "Missing version! aborting release..." && exit 1

    docker pull orhunp/git-cliff
    npm run changelog
    git add CHANGELOG.md
    git commit -m "v$new_version"
    git tag "v$new_version"
}

# this git binary won't be affected by aliases (hopefully)
git_bin=/usr/bin/git

# get latest git tag
latest_tag=$(git describe --abbrev=0 --tags 2> /dev/null)

# if repo doesn't have any git tags, assumes it's the first release
if [ -n "$latest_tag" ]; then
    latest_version="${latest_tag#?}"
    # get all commits since the last tag
    commits=$($git_bin log --format=format:%s "$latest_tag..HEAD")

    # get only the type of each commit
    strip_commit_message="cut -d : -s -f 1"
    strip_commit_subject="cut -d ( -f 1"
    commit_types="$(echo "$commits" | $strip_commit_message | $strip_commit_subject)"

    # check if there are any breaking changes between the commits
    echo "$commit_types" | grep -q ! 2> /dev/null

    if [ $? -eq 0 ]; then
        new_version=$(bump major "$latest_version")
        echo "bump major: $new_version"
        release "$new_version"
        exit
    fi

    # check if there are any features changes between the commits
    echo "$commit_types" | grep -q feat 2> /dev/null

    if [ $? -eq 0 ]; then
        new_version=$(bump minor "$latest_version")
        echo "bump minor: $new_version"
        release "$new_version"
        exit
    fi

    new_version=$(bump patch "$latest_version")
    echo "bump patch: $new_version"
    release "$new_version"
else
    echo "first release: 0.1.0"
    release 0.1.0
fi
