import"./sleep.mjs";import{t}from"./typingInterval.mjs";const e=async({currentNode:e,text:s},n)=>{e.classList.add("typing");for(let r=0;r<=s.length;r++){"<"===s[r]&&(r=s.indexOf(">",r)),e.innerHTML=s.slice(0,r),await t(n.interval)}null!==e.nextSibling&&1==e.classList.length?e.removeAttribute("class"):e.classList.remove("typing")};export default async({elements:t},s)=>{for(const n of t)e(n,s);const{currentNode:n}=t.reduce(((t,e)=>{const s=t.text.length;return e.text.length>s?t=e:t}));new MutationObserver((t=>{t.forEach((t=>{const e=!t.target.classList.contains("typing");"attributes"===t.type&&e&&s.dispatch("done")}))})).observe(n,{attributes:!0,childList:!0,subtree:!0})};
